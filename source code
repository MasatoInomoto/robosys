#include <linux/module.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/device.h>
#include <asm/uaccess.h>
#include <linux/io.h>

MODULE_AUTHOR("Masato Inomoto");
MODULE_DESCRIPTION("driver for LED control");
MODULE_LICENSE("GPL");
MODULE_VERSION("0.1");

static dev_t dev;
static struct cdev cdv;
static struct class *cls = NULL;
static volatile u32 *gpio_base = NULL;

static int gpio_port[] = {24}
int port_n = 0;
int time_flag = 0;
char mode;

static ssize_t led_write(struct file* flip, const char* buf, size_t count, loff_t* pos)
{
//      char c;
        if(copy_from_user(&c,buf,sizeof(char)))
                return -EFAULT;
        
        if(c == '0')
        gpio_base[10] = 1 << 25;
    else if(c == '1')
        gpio_base[7] = 1 << 25;

    return 1;
}

static struct file_operations led_fops = {
         .owner = THIS_MODULE,
         .write = led_write
};

stati int  __init init_mod(void)
{
 int retval;
 
 gpio_base = ioremap_noache(0x3f200000, 0xA0);
 
 const u32 led = gpio_port[port_n];
 const u32 index = led/10;
 const u32 shift = (led%10)*3;
 const u32 mask = ~(0x7 << shift);
 
 retval = alloc_chrdev_region(&dev, 0, 1, "myled");
         if(retval < 0 ) {
              printk(KERN_ERR "alloc_chrdev_region failed.\n");
              return retval;
          }
printk(KERN_INFO "%s is loaded. major:%d\n" ,__FILE__,MAJOR(dev));

cdev_init(&cdv, &led_fops);
retval = cdev_add(&cdv, dev , 1);

static void __exit cleanup_mod(void)
{
         cdev_del(&cdv);
         device_destroy(cls, dev);
         class_destroy(cls);
         unregister_chrdev_region(dev, 1);
         printk(KERN_INFO "%s is inloaded. major:%d\n",__FILE__,MAJOR(dev));
 }
 
 module_init(init_mod);
 module_exit(cleanup_mod);
         
